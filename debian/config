#!/bin/sh
## debconf config script for ddclient
##
## This script runs before copying the files of the package to the correct
## locations in the system.
##
## It gets the appropriate configuration values and stores them in the debconf
## database. If necessary it asks the user about some needed information.
##
## This file is human readable by using "grep '#' <thisfile>"
#

set -e

# include debconf library
. /usr/share/debconf/confmodule

# check if we use the right debconf version
db_version 2.0 || { echo "ddclient.config: \
  need DebConf 2.0 or later"; exit 1; }
			  

#----------------------------------------------------------------------------
# read_old_config() - read the configuration from the old config file
#----------------------------------------------------------------------------
read_old_config()
{
  # read out the existing config file
  read host username password </etc/ddclient.conf 

  # put the old values into the database
  db_set ddclient/host $host
  db_set ddclient/username $username
  db_set ddclient/password $password
  db_set ddclient/names $host

  # set reasonable defaults for the new config options
  db_set ddclient/service www.dyndns.org
  db_set ddclient/server members.dyndns.org
  db_set ddclient/protocol dyndns2

  # important: we do not set the interface variable

  db_set ddclient/run_daemon false
  db_set ddclient/run_ipup false
}


#----------------------------------------------------------------------------
# warn_config_broken() - show warning that the current config is broken
#----------------------------------------------------------------------------
warn_config_broken()
{
# show the message that the current configuration is not ok
db_fset ddclient/modifiedconfig seen false
db_input medium ddclient/modifiedconfig || true
db_go
}


#----------------------------------------------------------------------------
# create_new_config() - create a new config from scratch
#----------------------------------------------------------------------------
create_new_config()
{
  # get the service to use with ddclient
  db_input critical ddclient/service || true
  db_go
  db_get ddclient/service
  case "$RET" in
    www.dyndns.org)
      server=members.dyndns.org
      protocol=dyndns2
      ;;
    www.easydns.com)
      server=members.easydns.com
      protocol=easydns
      ;;
    www.dslreports.com)
      server=www.dslreports.com
      protocol=dslreports1
      ;;
    www.zoneedit.com)
      server=www.zoneedit.com
      protocol=zoneedit1
      ;;
  esac
  if [ "$RET" != other ]; then
    # if we know the service we put in the server and protocol
    db_set ddclient/server $server
    db_fset ddclient/server seen true
    db_set ddclient/protocol $protocol
    db_fset ddclient/protocol seen true
  else
    # if not we ask the user about the server and protocol
    db_input critical ddclient/server || true
    db_input critical ddclient/protocol || true
    db_go
  fi

  # ask the user about the dynamic DNS names, account and interface
  db_input critical ddclient/names || true
  db_input critical ddclient/username || true
  db_input critical ddclient/password || true
  db_input critical ddclient/interface || true
  db_go

  # set the default mode ddclient should run in (ip-up | daemon),
  # depending on the entered interface (XpppX or other)
  db_get ddclient/interface
  interface=$RET
  
  # if it is actually a ppp or related interface
  if [ -z "${interface##*ppp*}" ]; then
    db_fget ddclient/run_ipup seen
    if [ $RET = "false" ]; then
      db_set ddclient/run_ipup true
    fi
  # if it is an interface of a different type
  else
    db_fget ddclient/run_daemon seen
    if [ $RET = "false" ]; then
      db_set ddclient/run_daemon true
    fi
  fi
  
  # maybe ask the user to override the default values
  db_input medium ddclient/run_ipup || true
  db_input medium ddclient/run_daemon || true
  db_go
  
  # if ddclient should run in daemon mode we ask for the update interval
  db_get ddclient/run_daemon
  if [ $RET = "true" ]; then
    db_input medium ddclient/daemon_interval || true
    db_go
  fi
}


 
#
#*****************************************************************************
# start of the main script
#*****************************************************************************
# if the first parameter is "configure":
if [ "$1" = "configure" ]; then

  # if /etc/ddclient.conf does not exist:
  if [ ! -f /etc/ddclient.conf ]; then
    # create a new config and exit succesfully
	create_new_config
	exit 0
  fi

  # if we are upgrading from an old version:
  if dpkg --compare-versions "$2" lt-nl 3.6.2-1; then
    # show the message that the configuration has changed
    db_fset ddclient/newconfigfmt seen false
    db_input medium ddclient/newconfigfmt || true
    db_go
    
    # if the existing /etc/ddclient.conf consists of three words:
    if [ "`wc -w </etc/ddclient.conf`" -eq 3 ]; then
      # read old config and exit
      read_old_config
	  exit 0
    # if the existing /etc/ddclient.conf does not consist of three words:
    else
      # show warning that the current config is broken and exit
      warn_config_broken
      exit 0
    fi
    
  # if we are not upgrading:
  else
    # exit successfully
	exit 0
  fi
  
# if the first parameter is "reconfigure":
elif [ "$1" = "reconfigure" ] ; then

  # create new config
  create_new_config

  # remove the existing configuration files
  rm -f /etc/ddclient.conf /etc/default/ddclient
fi
