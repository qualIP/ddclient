#!/bin/sh
## debconf config script for ddclient
##
## This script runs before copying the files of the package to the correct
## locations in the system.
##
## It gets the appropriate configuration values and stores them in the debconf
## database. If necessary it asks the user about some needed information.
##
## This file is human readable by using "grep '#' <thisfile>"
#

set -e

fatal() { printf %s\\n "$0: $*" >&2; exit 1; }

. /usr/share/debconf/confmodule
db_version 2.0 || fatal "need DebConf 2.0 or later"

# Usage: hosts=`download_hostlist USER PASSWORD`
# Retrieves the DynDNS hosts of given user
download_hostlist() {
  local username="$1" password="$2"
  # FIXME: protect against wget not installed
  wget "http://$username:$password@update.dyndns.com/text/gethostlist" -q -O -\
    | awk -F \: '{print $2, $4}' | sed -e "N;s/ \n/,/g" | sed -e "s/,/, /g"
}

# Retrieve the list of DynDNS hosts of the user's account from the DynDNS
# server and let the user select which hosts to update.
retrieve_dyndns_hostlist() {
  db_go
  db_get ddclient/username && username="$RET"
  db_get ddclient/password && password="$RET"

  hostslist=`download_hostlist "$username" "$password"`

  # add the list to our multichoice template, then prompt the user
  db_subst ddclient/hostslist choices "$hostslist"
  db_input critical ddclient/hostslist || true

  # set names using the host list to write it to the config file later
  db_go
  db_get ddclient/hostslist
  hostslist=`echo "$RET" | sed -e "s/, /,/g"`
  db_set ddclient/names "$hostslist"

  # if the hostslist was blank, let the user know some possible reasons
  if [ -z "$hostslist" ]; then
    db_input high ddclient/blankhostslist || true
  fi
}

#----------------------------------------------------------------------------
# create_new_config() - create a new config from scratch
#----------------------------------------------------------------------------
create_new_config()
{
  services="\
no-ip.com protocol=noip
freedns.afraid.org protocol=freedns
duckdns.org protocol=duckdns
domains.google protocol=googledomains
www.dyndns.com protocol=dyndns2
www.easydns.com protocol=easydns
www.dslreports.com protocol=dslreports1
www.zoneedit.com protocol=zoneedit1
"
  services_comma=$(printf %s "${services}" | awk -v ORS=', ' '{print$1}')
  db_subst ddclient/service choices "${services_comma%, }"
  db_input critical ddclient/service || true
  db_go
  db_get ddclient/service; service=${RET}
  if [ "${service}" != other ] &&
      svcdef=$(printf %s "${services}" | grep -m 1 "^${service} "); then
    eval "${svcdef#* }"
    db_set ddclient/protocol "$protocol"
    db_set ddclient/server ""  # use the default server
  else
    # If this case is reached and ${service} != other, the question was
    # previously answered (e.g., with debconf-set-selections) with a value that
    # is either invalid or no longer supported. Either way, treat it as if the
    # user chose "other".
    db_input critical ddclient/protocol || true
    db_go
    db_get ddclient/protocol; protocol=${RET}
    if [ "${protocol}" = other ]; then
        db_input critical ddclient/protocol-other || true
        db_go
        db_get ddclient/protocol-other; protocol=${RET}
        db_set ddclient/protocol "${protocol}"
    fi
    db_subst ddclient/server protocol "${protocol}"
    # Usually the protocol's default server is acceptable, but if the user
    # picked "other" in ddclient/service and then picked a protocol used by one
    # of the well-known services returned from get_services, then we can be
    # confident that the user chose "other" because the protocol's default
    # server is not suitable. This is particularly true for the dyndns2
    # protocol (many dynamic DNS service providers use the dyndns2 protocol).
    server_priority=critical
    printf %s "${services}" | grep -q " protocol=${protocol}\\( .*\\)*\$" \
      || server_priority=low
    db_input "${server_priority}" ddclient/server || true
  fi

  db_input critical ddclient/username || true
  while true; do
    db_input critical ddclient/password || true
    db_input critical ddclient/password-repeat || true
    db_go
    db_get ddclient/password
    password="$RET"
    db_get ddclient/password-repeat
    if [ "$password" = "$RET" ]; then
      break
    fi
    db_fset ddclient/password seen false
    db_fset ddclient/password-repeat seen false
    db_fset ddclient/password-mismatch seen false
    db_input critical ddclient/password-mismatch || true
  done

  if [ "${service}" = "www.dyndns.com" ]; then
    db_input critical ddclient/checkip || true
  else
    db_set ddclient/checkip false
  fi
  db_go
  db_get ddclient/checkip; checkip=${RET}
  if [ "${checkip}" = "false" ]; then
    db_input critical ddclient/interface || true
  fi

  # set the default mode ddclient should run in (ip-up | daemon),
  # depending on the entered interface (XpppX or other)
  db_go
  db_get ddclient/interface
  interface=$RET

  # if it is actually a ppp or related interface, and we're not using checkip
  if [ "$checkip" != "true"  ] && [ -z "${interface##*ppp*}" ]; then
    db_fget ddclient/run_ipup seen
    if [ "$RET" = "false" ]; then
      db_set ddclient/run_ipup true
    fi
  # if it is an interface of a different type
  else
    db_fget ddclient/run_daemon seen
    if [ "$RET" = "false" ]; then
      db_set ddclient/run_daemon true
    fi
  fi

  # maybe ask the user to override the default values
  db_input medium ddclient/run_ipup || true

  # if using ipup dont use daemon, bug #462207
  db_go
  db_get ddclient/run_ipup
  if [ "$RET" = "true" ]; then
    db_set ddclient/run_daemon false
  else
    db_input medium ddclient/run_daemon || true
  fi

  # if ddclient should run in daemon mode we ask for the update interval
  db_go
  db_get ddclient/run_daemon
  if [ "$RET" = "true" ]; then
    db_input medium ddclient/daemon_interval || true
  fi

  if [ "${service}" = "www.dyndns.com" ] && command -v wget >/dev/null; then
    db_input critical ddclient/fetchhosts || true
  else
    db_set ddclient/fetchhosts Manually
  fi
  db_go
  db_get ddclient/fetchhosts
  if [ "${RET}" = "From list" ]; then
    retrieve_dyndns_hostlist
  else
    db_input critical ddclient/names || true
  fi

  db_go
}

if [ "$1" = "configure" ]; then
  if [ ! -f /etc/ddclient.conf ]; then
    create_new_config
    exit 0
  fi
  exit 0
elif [ "$1" = "reconfigure" ]; then
  create_new_config
  rm -f /etc/ddclient.conf /etc/default/ddclient
fi
